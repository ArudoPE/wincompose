<!--
   - WinCompose — a compose key for Windows — http://wincompose.info/
   -
   - Copyright © 2013—2018 Sam Hocevar <sam@hocevar.net>
   -             2014—2015 Benjamin Litzelmann
   -
   - This program is free software. It comes without any warranty, to
   - the extent permitted by applicable law. You can redistribute it
   - and/or modify it under the terms of the Do What the Fuck You Want
   - to Public License, Version 2, as published by the WTFPL Task Force.
   - See http://www.wtfpl.net/ for more details.
  -->

<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i18n="clr-namespace:WinCompose.i18n"
        xmlns:wc="clr-namespace:WinCompose"
        xmlns:emoji="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"
        mc:Ignorable="d" x:Class="WinCompose.SequenceWindow"
        Title="{x:Static i18n:Text.WindowTitle}" Width="1024" Height="600"
        Icon="/WinCompose;component/res/key_compose.png" Closing="CloseWindowClicked">

    <Window.InputBindings>
        <!-- TODO: bind this to something -->
        <!--<KeyBinding Key="Escape" Command=""/>-->
    </Window.InputBindings>

    <Window.Resources>
        <BitmapImage x:Key="EmptyKeyImage" UriSource="../res/key_empty.png"/>
        <BitmapImage x:Key="ComposeKeyImage" UriSource="../res/key_compose.png"/>
        <BitmapImage x:Key="SpaceKeyImage" UriSource="../res/key_space.png"/>

        <!-- This style can be applied to a TextBlock to display text with a smaller size -->
        <Style x:Key="SmallTextBlock" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
            <Setter Property="LayoutTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- This DataTemplate contains a TextBox and a "clear text" button that can be used for the Search text input -->
        <DataTemplate x:Key="SearchText">
            <Grid>
                <TextBox x:Name="SearchBox" Padding="4" Width="200"
                         Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <DockPanel>
                    <Button DockPanel.Dock="Right" Click="ClearSearchClicked" Margin="4,0">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border Background="Transparent">
                                    <ContentPresenter Content="{TemplateBinding Content}"/>
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                        <TextBlock FontSize="10" VerticalAlignment="Center" Text="✖"
                                   FontFamily="{x:Static wc:Constants.PreferredFontFamily}"/>
                    </Button>
                    <TextBlock x:Name="Watermark" Text="{x:Static i18n:Text.Search}" VerticalAlignment="Center"
        				Margin="8,0" FontStyle="Italic" Foreground="DarkGray" Visibility="Collapsed" IsHitTestVisible="False"/>
                </DockPanel>
            </Grid>
            <DataTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsFocused" Value="False" SourceName="SearchBox"/>
                        <Condition Property="Text" Value="" SourceName="SearchBox"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" TargetName="Watermark"/>
                </MultiTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </Window.Resources>

    <Grid Margin="8">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="5*"/>
        </Grid.ColumnDefinitions>
        <DockPanel Grid.Column="0">
            <GroupBox Header="{x:Static i18n:Text.Categories}" DockPanel.Dock="Top" VerticalAlignment="Top" Padding="0,4">
                <StackPanel VerticalAlignment="Center">
                    <RadioButton Margin="4" GroupName="Category"
                                 IsChecked="{Binding Path=ActiveCategoryArray[0], Mode=TwoWay}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{x:Static i18n:Text.UnicodeCharacters}"/>
                            <TextBlock Text="—" Margin="4,0,4,0"/>
                            <TextBlock Text="ŵ Ǿ à Ꝏ Σ ⍾ ꟿ"/>
                        </StackPanel>
                    </RadioButton>
                    <RadioButton Margin="4" GroupName="Category"
                                 IsChecked="{Binding Path=ActiveCategoryArray[1], Mode=TwoWay}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{x:Static i18n:Text.Emoji}"/>
                            <TextBlock Text="—" Margin="4,0,4,0"/>
                            <emoji:Image Text="☺" Height="18"/>
                            <emoji:Image Text="♥" Height="18"/>
                            <emoji:Image Text="🐨" Height="18"/>
                        </StackPanel>
                    </RadioButton>
                    <RadioButton Margin="4" GroupName="Category"
                                 IsChecked="{Binding Path=ActiveCategoryArray[2], Mode=TwoWay}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{x:Static i18n:Text.UserMacros}"/>
                            <TextBlock Text="—" Margin="4,0,4,0"/>
                            <TextBlock Text="( ͡° ͜ʖ ͡°)"/>
                        </StackPanel>
                    </RadioButton>
                    <RadioButton Margin="4" GroupName="Category"
                                 IsChecked="{Binding Path=ActiveCategoryArray[3], Mode=TwoWay}">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter ContentTemplate="{StaticResource SearchText}" Content="{Binding}"/>
                        </StackPanel>
                    </RadioButton>
                </StackPanel>
            </GroupBox>
            <ListBox Margin="8" ItemsSource="{Binding Categories}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectionMode="Extended">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Setter Property="Padding" Value="4"/>
                        <Setter Property="IsSelected" Value="{Binding IsSelected}" d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True, wc:CategoryViewModel}"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="wc:CategoryViewModel">
                        <StackPanel>
                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Left" TextWrapping="Wrap"/>
                            <!-- TODO: make this a tooltip instead? -->
                            <!--
                            <StackPanel Orientation="Horizontal" HorizonalAlignment="Right">
                                <TextBlock Text="{Binding RangeStart, StringFormat=U+\{0:X4\}}" Style="{StaticResource SmallTextBlock}"/>
                                <TextBlock Text="…" Style="{StaticResource SmallTextBlock}"/>
                                <TextBlock Text="{Binding RangeEnd, StringFormat=U+\{0:X4\}}" Style="{StaticResource SmallTextBlock}"/>
                            </StackPanel>
                            -->
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </DockPanel>

        <GridSplitter Grid.Column="1" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent"/>

        <DockPanel Grid.Column="2">
            <TextBlock DockPanel.Dock="Top" Text="{x:Static i18n:Text.Sequences}" Margin="8"/>
            <ListBox Margin="8" ItemsSource="{Binding Sequences}"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     VirtualizingStackPanel.VirtualizationMode="Standard">
                <!-- ^^ This is still set to "Standard" because Emoji.Wpf.Image doesn't recycle well -->
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <DockPanel Margin="0,2">
                            <Border BorderThickness="1" BorderBrush="Black" Background="White" Margin="2,0" SnapsToDevicePixels="True">
                                <Viewbox Width="32" Height="32" DockPanel.Dock="Left" StretchDirection="UpOnly" ToolTipService.InitialShowDelay="0" ToolTipService.BetweenShowDelay="0">
                                    <!-- The small character box followed by the large toolkit -->
                                    <emoji:Image Text="{Binding Result}" Width="32" Height="32" Background="Transparent"
                                                 FontFamily="{x:Static wc:Constants.PreferredFontFamily}"/>
                                    <Viewbox.ToolTip>
                                        <emoji:Image Text="{Binding Result}" Width="200" Height="200"
                                                     FontFamily="{x:Static wc:Constants.PreferredFontFamily}"/>
                                    </Viewbox.ToolTip>
                                </Viewbox>
                            </Border>
                            <!-- The sequence, printed as key icons -->
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="4,0">
                                <Border Width="32" Height="32">
                                    <Border.Background>
                                        <ImageBrush ImageSource="{StaticResource ComposeKeyImage}"/>
                                    </Border.Background>
                                </Border>
                                <ItemsControl ItemsSource="{Binding Sequence}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text=" " VerticalAlignment="Center"/>
                                                <Border Width="32" Height="32" x:Name="KeyImage">
                                                    <Border.Background>
                                                        <ImageBrush ImageSource="{StaticResource EmptyKeyImage}"/>
                                                    </Border.Background>
                                                    <Viewbox Margin="4">
                                                        <TextBlock Text="{Binding KeyLabel}" Foreground="#310" FontFamily="Consolas" FontWeight="Bold" />
                                                    </Viewbox>
                                                </Border>
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <!-- Change the key image and size when the value matches the space key -->
                                                <DataTrigger Binding="{Binding}" Value="{x:Static wc:SequenceViewModel.SpaceKey}">
                                                    <Setter TargetName="KeyImage" Property="Width" Value="64"/>
                                                    <!--<Setter TargetName="KeyImage" Property="Height" Value="16"/>-->
                                                    <Setter TargetName="KeyImage" Property="Background">
                                                        <Setter.Value>
                                                            <ImageBrush ImageSource="{StaticResource SpaceKeyImage}"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                            <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal">
                                <TextBlock Text="{Binding Utf32, Mode=OneTime, StringFormat=U+\{0:X4\}}"/>
                                <TextBlock Text="{Binding UnicodeCategory, Converter={wc:UnicodeCategoryConverter}, Mode=OneTime}" HorizontalAlignment="Right" Margin="10,0"/>
                            </StackPanel>
                            <TextBlock Text="{Binding Description, Mode=OneTime}" TextTrimming="WordEllipsis"/>
                        </DockPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>

            </ListBox>
        </DockPanel>
        <Frame x:Name="MainFrame">
            <Frame.Template>
                <ControlTemplate TargetType="Frame">
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            Background="{TemplateBinding Panel.Background}">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                          Name="PART_FrameCP"/>
                    </Border>
                </ControlTemplate>
            </Frame.Template>
        </Frame>
    </Grid>
</Window>
